BootStrap: debootstrap
OSVersion: xenial
MirrorURL: http://us.archive.ubuntu.com/ubuntu/
%runscript
 
%environment
export CUDA_HOME=/usr/local/cuda
CUDA_LIB=$CUDA_HOME/lib64
CUDA_INCLUDE=$CUDA_HOME/include
CUDA_BIN=$CUDA_HOME/bin
export LD_LIBRARY_PATH=$CUDA_LIB
export PATH=$CUDA_BIN:$PATH
%post
echo "deb http://us.archive.ubuntu.com/ubuntu xenial main
deb http://yum.int.janelia.org:8080/ubuntu/ xenial main restricted
deb http://yum.int.janelia.org:8080/ubuntu/ xenial-updates main restricted
deb http://yum.int.janelia.org:8080/ubuntu/ xenial universe
deb http://yum.int.janelia.org:8080/ubuntu/ xenial-updates universe
deb http://yum.int.janelia.org:8080/ubuntu/ xenial multiverse
deb http://yum.int.janelia.org:8080/ubuntu/ xenial-updates multiverse
deb http://yum.int.janelia.org:8080/ubuntu/ xenial-backports main restricted universe multiverse
deb http://security.ubuntu.com/ubuntu xenial-security main restricted
deb http://security.ubuntu.com/ubuntu xenial-security universe
deb http://security.ubuntu.com/ubuntu xenial-security multiverse
deb http://archive.canonical.com/ xenial partner" > /etc/apt/sources.list
apt-get update
apt-get -y install libopencv-dev build-essential checkinstall cmake pkg-config yasm libjpeg-dev libjasper-dev libavcodec-dev libavformat-dev libswscale-dev libdc1394-22-dev libxine2-dev libgstreamer0.10-dev libgstreamer-plugins-base0.10-dev libv4l-dev python3.5-dev python3.5-numpy libtbb-dev libqt4-dev libgtk2.0-dev libfaac-dev libmp3lame-dev libopencore-amrnb-dev libopencore-amrwb-dev libtheora-dev libvorbis-dev libxvidcore-dev x264 v4l-utils
apt-get -y install git
apt-get -y install python3.5 wget vim perl gcc cmake python3.5-tk
apt-get -y install libprotobuf-dev libleveldb-dev libsnappy-dev libopencv-dev libhdf5-serial-dev protobuf-compiler libgflags-dev libgoogle-glog-dev liblmdb-dev libboost-all-dev libopenblas-dev libatlas-base-dev

apt-get -y install libxtst6
mkdir /pycharm-src && cd /pycharm-src
wget https://download-cf.jetbrains.com/python/pycharm-community-2018.3.4.tar.gz
tar -xvzf pycharm-community-2018.3.4.tar.gz

wget https://bootstrap.pypa.io/get-pip.py --no-check-certificate
python3.5 get-pip.py
pip3 install virtualenv
mkdir /opt/venv
mkdir -p /groups/branson/bransonlab /nrs/branson /groups/branson/home /scratch
virtualenv -p /usr/bin/python3.5 /opt/venv
. /opt/venv/bin/activate
pip3 install sklearn future lmdb scikit-image hdf5storage
pip3 install python-gflags GitPython h5py numpy scipy matplotlib https://download.pytorch.org/whl/cu100/torch-1.0.1.post2-cp35-cp35m-linux_x86_64.whl tensorflow-gpu
pip3 install imageio munkres torchvision tqdm
git clone git://source.ffmpeg.org/ffmpeg.git /opt/ffmpeg
cd /opt/ffmpeg
/opt/ffmpeg/configure --enable-nonfree --enable-pic --enable-shared
make
make install
git clone https://github.com/Itseez/opencv.git /opt/opencv
cd /opt/opencv
git checkout 33b765d7979fd8a6038026aa44f6ff1a9c082b7b
mkdir /opt/opencv/build
cd /opt/opencv/build
#cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D WITH_TBB=ON -D BUILD_NEW_PYTHON_SUPPORT=ON -D WITH_V4L=ON -D INSTALL_C_EXAMPLES=ON -D INSTALL_PYTHON_EXAMPLES=ON -D BUILD_EXAMPLES=ON -D WITH_QT=ON -D WITH_OPENGL=ON -D CUDA_CUDA_LIBRARY=/usr/local/cuda/lib64/stubs/libcuda.so ..
cmake -DWITH_CUDA=OFF -DBUILD_TIFF=ON -DBUILD_opencv_java=OFF -DENABLE_AVX=ON -DWITH_OPENGL=ON -DWITH_OPENCL=ON -DWITH_IPP=ON -DWITH_TBB=ON -DWITH_EIGEN=ON -DWITH_V4L=ON -DWITH_VTK=OFF -DBUILD_TESTS=OFF -DBUILD_PERF_TESTS=OFF -DCMAKE_BUILD_TYPE=RELEASE -DBUILD_opencv_python2=OFF -DCMAKE_INSTALL_PREFIX=$(python3 -c "import sys; print(sys.prefix)") -DPYTHON3_EXECUTABLE=$(which python3) -DPYTHON3_INCLUDE_DIR=$(python3 -c "from distutils.sysconfig import get_python_inc; print(get_python_inc())") -DPYTHON3_PACKAGES_PATH=$(python3 -c "from distutils.sysconfig import get_python_lib; print(get_python_lib())") -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D INSTALL_PYTHON_EXAMPLES=ON -D INSTALL_C_EXAMPLES=OFF -D PYTHON_EXECUTABLE=~/miniconda3/envs/dl/bin/python -D BUILD_EXAMPLES=ON -D CUDA_CUDA_LIBRARY=/usr/local/cuda/lib64/stubs/libcuda.so ..
make -j2
make install
ln -s /opt/opencv/build/lib/cv2.so /opt/venv/lib/python3.5/site-packages/cv2.so
git clone https://github.com/facebook/C3D.git /opt/c3d/
cd /opt/c3d/C3D-v1.1
cp Makefile.config.example Makefile.config
sed -i '36,37d' Makefile.config
sed -i '36 s/.*/CUDA_ARCH := -gencode arch=compute_30,code=sm_30 \\/' Makefile.config
sed -i '415 s/.*/NVCCFLAGS += -D_FORCE_INLINES -ccbin=$(CXX) -Xcompiler -fPIC $(COMMON_FLAGS)/' Makefile
sed -i '195 s/.*/LIBRARIES += glog gflags protobuf leveldb snappy lmdb boost_system boost_filesystem hdf5_hl hdf5 m opencv_core opencv_highgui opencv_imgproc opencv_imgcodecs opencv_videoio/' Makefile
sed -i '65 a set(${CMAKE_CXX_FLAGS} "-D_FORCE_INLINES ${CMAKE_CXX_FLAGS}"' /opt/c3d/C3D-v1.1/CMakeLists.txt
protoc src/caffe/proto/caffe.proto --cpp_out=.
mkdir -p include/caffe/proto
mv src/caffe/proto/caffe.pb.h include/caffe/proto
cd /usr/lib/x86_64-linux-gnu
ln -s libhdf5_serial.so.10.1.0 libhdf5.so
ln -s libhdf5_serial_hl.so.10.0.2 libhdf5_hl.so
echo "/usr/local/lib/" > /etc/ld.so.conf.d/opencv.conf
ldconfig
#export CPATH="/usr/include/hdf5/serial/"
#make all
#make test
#make runtest

